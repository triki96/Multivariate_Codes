/*****************************************************************************/
/********************************* MQ --> MLD ********************************/
/*****************************************************************************/

/********************************* Constants *********************************/

F := GF(2);

G_hat := Matrix(F, [[1, 0, 0, 1, 1, 0, 0, 1, 1, 1],
					[0, 1, 0, 0, 0, 1, 1, 1, 1, 1],
					[0, 0, 1, 1, 1, 1, 1, 1, 1, 1]]);

e_hat := Vector(F, [0, 0, 0, 0, 0, 0, 0, 1, 1, 1]);


/********************************** Utility **********************************/

/*
Applies the map tau: F^{10q} -> F^{3q} to a vector v_tilde = (v_1, ..., v_q).
The function constructs a vector by taking the first 3 entries of each
component v_i in v_tilde.
Input:
- v_tilde, vector of length 10q over F.
*/
function tau(v_tilde)
	
	q := NumberOfColumns(v_tilde) div 10;
	v := ZeroMatrix(F, 1, 3*q);				//Output vector
	
	for i in [1..q] do
		k1 := (i - 1)*10 + 1;					//1, 11, ..., 10q-9
		k2 := (i - 1)*3 + 1;					//1, 4, ..., 3q-2

		tmp := ColumnSubmatrix(v_tilde, k1, 3);	//tmp = v~[k1..k1+2]

		InsertBlock(~v, tmp, 1, k2);
	end for;

	return v;
end function;


/********************************* Reduction *********************************/

// Quadratic equations

/*
Returns the MLD instance (H^, s^, t^) associated to an MQ system in standard
form having only one quadratic equation "xy + z = 0".
*/
function quadrSing()

	// H^
	C_hat := LinearCode(G_hat);
	H_hat := ParityCheckMatrix(C_hat);
	
	// s^
	s_hat := e_hat * Transpose(H_hat);

	// t^
	t_hat := 3;

	return H_hat, s_hat, t_hat;
end function;

/*
Returns the MLD instance (H~, s~, t~) associated to an MQ system in standard
form having q quadratic equations of the form "x_i*y_i + z_i = 0".
Input:
- q, number of quadratic equations. 
*/
function quadrSyst(q)

	// Getting H^, s^ and t^ for a single quadratic equation
	H_hat, s_hat, t_hat := quadrSing();

	// H~
	D := [H_hat : _ in [1..q]];
	H_tilde := DiagonalJoin(D);

	// s~
	s_seq := [s_hat : _ in [1..q]];
	s_tilde := HorizontalJoin(s_seq);	//Since H~ is block-diag and e~ is the
										//concat of e^, s~ is the concat of s^

	// t~
	t_tilde := 3*q;

	return H_tilde, s_tilde, t_tilde;
end function;


// Linear equations

/*
Given a binary sequence a_f representing the coefficients of a linear
polynomial f in 3q variables, returns a vector of length 10q as follows:
	(v1, v2, v3, v4, v5, v6, ..) --> (v1, v2, v3, 0, .., 0, v4, v5, v6, 0, ..)
												 |--------|
												   7 zeros
Input:
- a_f, vector of length 3q over F;
- q, number of quadratic equations.
*/
function nu(a_f, q)
	
	nu_f := ZeroMatrix(F, 1, 10*q);	//Output vector

	for i in [1..q] do
		k1 := (i - 1)*3 + 1;					//1, 4, ..., 3q-2
		k2 := (i - 1)*10 + 1;					//1, 11, ..., 10q-9

		tmp := ColumnSubmatrix(a_f, k1, 3);		//tmp = a_f[k1..k1+2]
		
		InsertBlock(~nu_f, tmp, 1, k2);
	end for;

	return nu_f;
end function;


// MQ --> MLD

/*
Returns the MLD instance (H, s, t) associated to an MQ system S in standard
form over a polynomial ring R.
Inputs:
- R, polynomial ring over F;
- S, sequence of polynomials over R forming a system in standard form.
*/
function reduction2MLD(R, S)
	
	// Creating a sequence of linear polynomials in S
	LP := [f : f in S | TotalDegree(f) le 1];
	l := #LP;

	// H~, s~, t~
	q := #S - l;
	H_tilde, s_tilde, t_tilde := quadrSyst(q);

	// H & s
	H := ZeroMatrix(F, 7*q+l, 10*q);
	InsertBlock(~H, H_tilde, 1, 1);		//H = [H~ | 0]^T

	s := ZeroMatrix(F, 1, 7*q+l);
	InsertBlock(~s, s_tilde, 1, 1);		//s = [s~ | 0]

	for i in [1..#LP] do
		M := Monomials(LP[i]);

		// Constant term check
		if 1 in M then
			s[1, 7*q+i] := 1;
		end if;

		a_f := ZeroMatrix(F, 1, 3*q);	//Vector of coefficients of f without
										//constant term	
		
		// Variables check
		for j in [1..3*q] do
			if R.j in M then
				a_f[1, j] := 1;
			end if;
		end for;

		nu_f := nu(a_f, q);
		InsertBlock(~H, nu_f, 7*q+i, 1);
	end for;

	// t
	t := t_tilde;

	return H, s, t;
end function;